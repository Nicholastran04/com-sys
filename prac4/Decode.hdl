// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (a or c)
 * and decodes those instructions.
 * The input in[16] is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if a-instruction, 1 if c-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1)
 *   c1 .. c6:  Op-code wires to ALU
 *   d1 d2 d3:  Destination wires to the load pins of A,D registers and Memory
 *   j1 j2 j3:  Jump wires to Jump Unit
 * For a-instructions, d1 should be 1, all other outputs should be 0
 * For c-instructions, outputs should correspond to their bits in the c-instruction
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type
        a,                  // ALU A/M
        c1,c2,c3,c4,c5,c6,  // Op-code wires to ALU
        d1,d2,d3,           // Destination wires
        j1,j2,j3;           // Jump wires

PARTS:
    Not(a=in[15], out=type);
    
    And(a=type, b=false, out=d1);  
    And(a=type, b=true, out=d2);   
    And(a=type, b=true, out=d3);   

    Mux(a=in[12], b=false, sel=type, out=a);  
    Mux(a=in[11], b=false, sel=type, out=c1);  
    Mux(a=in[10], b=false, sel=type, out=c2);  
    Mux(a=in[9],  b=false, sel=type, out=c3);  
    Mux(a=in[8],  b=false, sel=type, out=c4);  
    Mux(a=in[7],  b=false, sel=type, out=c5);  
    Mux(a=in[6],  b=false, sel=type, out=c6);  

    Mux(a=in[5], b=false, sel=type, out=j1);   
    Mux(a=in[4], b=false, sel=type, out=j2);   
    Mux(a=in[3], b=false, sel=type, out=j3);  
}